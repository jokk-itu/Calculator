// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

    open Core.Absyn

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | NOT
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | QM
  | COLON
  | LP
  | RP
  | LT
  | GT
  | EQ
  | NEQ
  | LE
  | GE
  | AND
  | OR
  | PLUS
  | MINUS
  | DIV
  | MUL
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_QM
    | TOKEN_COLON
    | TOKEN_LP
    | TOKEN_RP
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | NOT  -> 1 
  | TRUE  -> 2 
  | FALSE  -> 3 
  | IF  -> 4 
  | THEN  -> 5 
  | ELSE  -> 6 
  | QM  -> 7 
  | COLON  -> 8 
  | LP  -> 9 
  | RP  -> 10 
  | LT  -> 11 
  | GT  -> 12 
  | EQ  -> 13 
  | NEQ  -> 14 
  | LE  -> 15 
  | GE  -> 16 
  | AND  -> 17 
  | OR  -> 18 
  | PLUS  -> 19 
  | MINUS  -> 20 
  | DIV  -> 21 
  | MUL  -> 22 
  | CSTINT _ -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_NOT 
  | 2 -> TOKEN_TRUE 
  | 3 -> TOKEN_FALSE 
  | 4 -> TOKEN_IF 
  | 5 -> TOKEN_THEN 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_QM 
  | 8 -> TOKEN_COLON 
  | 9 -> TOKEN_LP 
  | 10 -> TOKEN_RP 
  | 11 -> TOKEN_LT 
  | 12 -> TOKEN_GT 
  | 13 -> TOKEN_EQ 
  | 14 -> TOKEN_NEQ 
  | 15 -> TOKEN_LE 
  | 16 -> TOKEN_GE 
  | 17 -> TOKEN_AND 
  | 18 -> TOKEN_OR 
  | 19 -> TOKEN_PLUS 
  | 20 -> TOKEN_MINUS 
  | 21 -> TOKEN_DIV 
  | 22 -> TOKEN_MUL 
  | 23 -> TOKEN_CSTINT 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparse 
    | 1 -> NONTERM_parse 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | NOT  -> "NOT" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | QM  -> "QM" 
  | COLON  -> "COLON" 
  | LP  -> "LP" 
  | RP  -> "RP" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | DIV  -> "DIV" 
  | MUL  -> "MUL" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | QM  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | RP  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 20us; 65535us; 0us; 2us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 32us; 17us; 33us; 18us; 34us; 19us; 35us; 20us; 36us; 21us; 37us; 22us; 38us; 23us; 39us; 24us; 40us; 25us; 41us; 26us; 42us; 27us; 43us; 28us; 44us; 29us; 45us; 30us; 46us; 31us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 14us; 1us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 14us; 6us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 1us; 7us; 14us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 1us; 7us; 14us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 1us; 7us; 14us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 14us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 48us; 50us; 65us; 67us; 82us; 84us; 99us; 114us; 129us; 144us; 159us; 174us; 189us; 204us; 219us; 234us; 249us; 264us; 279us; 294us; 309us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; 350us; 352us; 354us; |]
let _fsyacc_action_rows = 48
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 0us; 49152us; 14us; 32768us; 0us; 3us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 23us; 6us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 4us; 16390us; 17us; 32us; 18us; 33us; 21us; 38us; 22us; 39us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 14us; 32768us; 5us; 13us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 14us; 32768us; 6us; 15us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 12us; 16391us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 13us; 16392us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 13us; 16393us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 14us; 32768us; 7us; 34us; 8us; 35us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 4us; 16394us; 17us; 32us; 18us; 33us; 21us; 38us; 22us; 39us; 4us; 16395us; 17us; 32us; 18us; 33us; 21us; 38us; 22us; 39us; 4us; 16396us; 17us; 32us; 18us; 33us; 21us; 38us; 22us; 39us; 13us; 16397us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 13us; 16398us; 7us; 34us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16399us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16400us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16401us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16402us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16403us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 10us; 16404us; 11us; 40us; 12us; 41us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 14us; 32768us; 7us; 34us; 10us; 47us; 11us; 40us; 12us; 41us; 13us; 42us; 14us; 45us; 15us; 43us; 16us; 44us; 17us; 32us; 18us; 33us; 19us; 36us; 20us; 37us; 21us; 38us; 22us; 39us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 7us; 32768us; 1us; 9us; 2us; 7us; 3us; 8us; 4us; 11us; 9us; 46us; 20us; 5us; 23us; 4us; 0us; 16405us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 24us; 25us; 26us; 28us; 29us; 30us; 31us; 39us; 44us; 52us; 67us; 75us; 90us; 98us; 111us; 125us; 139us; 154us; 159us; 164us; 169us; 183us; 197us; 208us; 219us; 230us; 241us; 252us; 263us; 278us; 286us; 294us; 302us; 310us; 318us; 326us; 334us; 342us; 350us; 358us; 366us; 374us; 382us; 390us; 398us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 1us; 2us; 6us; 3us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; |]
let _fsyacc_reductions ()  =    [| 
# 226 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Core.Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparse));
# 235 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                         _1                              
                   )
# 26 "Parser.fsy"
                 : Core.Absyn.expr));
# 246 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                         CstI _1                         
                   )
# 29 "Parser.fsy"
                 : 'gentype_expr));
# 257 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                         CstI (- _2)                     
                   )
# 30 "Parser.fsy"
                 : 'gentype_expr));
# 268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                         CstI 1                          
                   )
# 31 "Parser.fsy"
                 : 'gentype_expr));
# 278 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                         CstI 0                          
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                         Conditional(_2, CstI 0, CstI 1) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 299 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                         Conditional(_2, _4, _6)         
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 312 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                         Conditional(_1, _3, CstI 0)     
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 324 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                         Conditional(_1, CstI 1, _3)     
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 336 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                         Conditional(_1, _3, _5)         
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 349 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                         Prim("+", _1, _3)               
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 361 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                         Prim("-", _1, _3)               
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 373 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                         Prim("/", _1, _3)               
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 385 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                         Prim("*", _1, _3)               
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 397 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                         Prim("<", _1, _3)               
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 409 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                         Prim(">", _1, _3)               
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                         Prim("==", _1, _3)              
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                         Prim("<=", _1, _3)              
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 445 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                         Prim(">=", _1, _3)              
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                         Prim("<>", _1, _3)              
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                         _2                              
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
|]
# 481 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parse lexer lexbuf : Core.Absyn.expr =
    engine lexer lexbuf 0 :?> _
