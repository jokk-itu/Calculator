// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | NOT
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | QM
  | COLON
  | LP
  | RP
  | LT
  | GT
  | EQ
  | NEQ
  | LE
  | GE
  | AND
  | OR
  | PLUS
  | MINUS
  | DIV
  | MUL
  | CSTINT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_QM
    | TOKEN_COLON
    | TOKEN_LP
    | TOKEN_RP
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_expr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val parse : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Core.Absyn.expr) 
